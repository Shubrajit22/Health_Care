<!DOCTYPE html>
<html lang="en">
    <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width,initial-scale=1.0">
    <title>Admin Dashboard</title>

    <!-- Montserrat Font -->
    <link href="https://fonts.googleapis.com/css2?family=Montserrat:wght@100;200;300;400;500;600;700;800;900&display=swap" rel="stylesheet">

    <!-- Material Icons -->
    <link href="https://fonts.googleapis.com/icon?family=Material+Icons+Outlined" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css" rel="stylesheet"/>
    <link rel="stylesheet" href="https://fonts.googleapis.com/icon?family=Material+Icons">
    <link rel="stylesheet" href="stylesheets/styles.css">

    <!-- Custom CSS -->
    <link rel="stylesheet" href="/stylesheets/style.css">
    </head>
    <body>
    <div class="grid-container">

      <!-- Header -->
      <header class="header">
        <div class="menu-icon" onclick="openSidebar()">
          <span class="material-icons-outlined">menu</span>
        </div>
        <div class="header-right">
          <span class="material-icons-outlined">notifications</span>
          <span class="material-icons-outlined">email</span>
          <span class="material-icons-outlined">account_circle</span>
        </div>
      </header>
      <!-- End Header -->

      <!-- Sidebar -->
      <aside id="sidebar">
        <div class="sidebar-title">
          <div class="sidebar-brand" id="title">
            <i class="bi bi-heart icon"></i>RemoHealth
          </div>
          <span class="material-icons-outlined" onclick="closeSidebar()">close</span>
        </div>
      
        <ul class="sidebar-list">
          <li class="sidebar-list-item">
            <a href="#" target="_blank">
              <span class="material-icons-outlined">person</span>
              <span id="username"><%= user.name %></span> <!-- Placeholder for the random name -->
            </a>
          </li>
          <ul class="sidebar-list">
            <li class="sidebar-list-item">
              <a href="index.ejs" target="_blank">
                <span class="material-icons-outlined">dashboard</span> Overview
              </a>
            </li>
            <li class="sidebar-list-item">
              <a href="https://www.timeanddate.com/calendar/" target="_blank">
                <span class="material-icons-outlined">calendar_today</span> Calendar
              </a>
            </li>
            <li class="sidebar-list-item">
              <a href="/profile" target="_blank">
                <span class="material-icons-outlined">message</span> Messages
              </a>
            </li>
            <li class="sidebar-list-item">
              <a href="#" target="_blank">
                <span class="material-icons-outlined">settings</span> Settings
              </a>
            </li>
            <li class="sidebar-list-item">
              <a href="#" target="_blank">
                <span class="material-icons-outlined">support</span> Contact Us
              </a>
            </li>
            <li class="sidebar-list-item">
              <a href="/logout" target="_blank">
                <span class="material-icons-outlined">exit_to_app</span> Log Out
              </a>
            </li>
          </ul>
      </aside>
      
    <!-- End Sidebar -->



      <!-- Main -->
      <main class="main-container">
        <div class="main-title">
            <h2>Health Indicator</h2>
        </div>
        
        <!-- Date filter -->
        <div class="date-filter">
          <label for="datepicker">Date:</label>
          <input type="date" id="datepicker" onchange="handleDateChange()">
      </div>

        <div class="main-cards">

          <div class="card">
            <div class="card-inner">
                <h3>Heart</h3>
                <div class="heart-container">
                    <span class="material-icons-outlined" id="heart">favorite</span>
                </div>
            </div>
            <h1 id="heartbeat">72</h1>
        </div>
        


          <div class="card">
            <div class="card-inner">
              <h3>Sleep</h3>
              <span class="material-icons-outlined">bedtime</span>
            </div>
            <h1>9 hours</h1>
          </div>

          <div class="card">
            <div class="card-inner">
              <h3>Walk</h3>
              <span class="material-icons-outlined">directions_walk</span>
            </div>
            <h1 id="step-count">0 <span>steps</span></h1> <!-- Use an ID to target the step count -->
          </div>
          

          <div class="card">
            <div class="card-inner">
                <h3>Body Temperature</h3>
                <span class="material-icons-outlined">thermostat</span>
            </div>
            <h1 id="temperature">36.5Â°C</h1>
        </div>
        
          
        </div>

        <div class="charts">

          <div class="charts-card">
            <h2 class="chart-title">O2 Level</h2>
            <div id="bar-chart"></div>
          </div>
        </div>
      </main>
      <!-- End Main -->

    </div>
    <div class="sos-button">
      <button onclick="sendSOS()">
        <span>Emergency Button</span>
      </button>
    </div>
    <!-- Scripts -->
    <!-- ApexCharts -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/apexcharts/3.35.5/apexcharts.min.js"></script>
    <!-- Custom JS -->
    <script >// SIDEBAR TOGGLE

        let sidebarOpen = false;
        const sidebar = document.getElementById('sidebar');
        
        function openSidebar() {
            if (!sidebarOpen) {
            sidebar.classList.add('sidebar-responsive');
            sidebarOpen = true;
            }
        }
        
        function closeSidebar() {
            if (sidebarOpen) {
            sidebar.classList.remove('sidebar-responsive');
            sidebarOpen = false;
            }
        }
        
        // ---------- CHARTS ----------
        
        // BAR CHART
// Example O2 levels for a 24-hour period
const o2Levels24hrs = [95, 92, 90, 88, 85, 87, 89, 91, 93, 94, 93, 92, 90, 88, 86, 85, 84, 85, 86, 87, 88, 90, 92, 94];

// Generate x-axis labels for a 24-hour period
const hours = Array.from(Array(24).keys()).map(hour => `${hour}:00`);

// Options for the O2 level chart
const o2ChartOptions24hrs = {
  series: [
    {
      data: o2Levels24hrs,
      name: 'Oxygen Levels',
    },
  ],
  chart: {
    type: 'bar',
    background: 'transparent',
    height: 350,
    toolbar: {
      show: false,
    },
  },
  colors: ['#2962ff'], // Adjust color as needed
  plotOptions: {
    bar: {
      distributed: true,
      borderRadius: 4,
      horizontal: false,
      columnWidth: '40%',
    },
  },
  dataLabels: {
    enabled: false,
  },
  fill: {
    opacity: 1,
  },
  grid: {
    borderColor: '#55596e',
    yaxis: {
      lines: {
        show: true,
      },
    },
    xaxis: {
      lines: {
        show: true,
      },
    },
  },
  legend: {
    show: false, // Hide the legend
  },
  stroke: {
    colors: ['transparent'],
    show: true,
    width: 2,
  },
  tooltip: {
    shared: true,
    intersect: false,
    theme: 'dark',
  },
  xaxis: {
    categories: hours,
    title: {
      style: {
        color: '#f5f7ff',
      },
    },
    axisBorder: {
      show: true,
      color: '#55596e',
    },
    axisTicks: {
      show: true,
      color: '#55596e',
    },
    labels: {
      style: {
        colors: '#f5f7ff',
      },
    },
  },
  yaxis: {
    title: {
      text: 'O2 Level',
      style: {
        color: '#f5f7ff',
      },
    },
    axisBorder: {
      color: '#55596e',
      show: true,
    },
    axisTicks: {
      color: '#55596e',
      show: true,
    },
    labels: {
      style: {
        colors: '#f5f7ff',
      },
    },
  },
};

// Render the O2 level chart
const o2Chart24hrs = new ApexCharts(
  document.querySelector('#bar-chart'),
  o2ChartOptions24hrs
);
o2Chart24hrs.render();

// Function to generate random data for the chart
function generateRandomData() {
    const newData = [];
    for (let i = 0; i < 24; i++) {
        // Generate a random number between 80 and 100 for oxygen levels
        newData.push(Math.floor(Math.random() * (100 - 80 + 1)) + 80);
    }
    return newData;
}

// Function to update the chart with new random data
function updateChart() {
    // Generate new random data
    const newData = generateRandomData();
    
    // Update the chart series data
    o2Chart24hrs.updateSeries([{ data: newData }]);
}

// Update the chart every 5 seconds (5000 milliseconds)
setInterval(updateChart, 5000);


function handleDateChange() {
    const selectedDate = document.getElementById('datepicker').value;
    // Do something with the selected date, like filtering data or updating charts
    console.log('Selected Date:', selectedDate);
}

document.addEventListener("DOMContentLoaded", function() {
    const today = new Date();
    const year = today.getFullYear();
    let month = today.getMonth() + 1;
    let day = today.getDate();

    // Format month and day to have leading zeros if necessary
    month = month < 10 ? "0" + month : month;
    day = day < 10 ? "0" + day : day;

    const formattedDate = `${year}-${month}-${day}`;
    document.getElementById('datepicker').value = formattedDate;
});

// Define an array of random names
//const randomNames = ['John Doe', 'Jane Smith', 'David Johnson', 'Emily Brown', 'Michael Wilson'];

// Select a random name from the array
const randomIndex = Math.floor(Math.random() * randomNames.length);
const randomName = randomNames[randomIndex];

// Display the random name in the sidebar
document.getElementById('username').textContent = randomName;

// Function to generate a random heartbeat value
function generateRandomHeartbeat() {
    // Generate a random number between 60 and 100 (realistic range for heartbeats per minute)
    return Math.floor(Math.random() * (100 - 60 + 1)) + 60;
}

// Function to update the heartbeat value periodically
function updateHeartbeat() {
    // Get the heartbeat element
    const heartbeatElement = document.getElementById('heartbeat');
    // Update the text content with the new random heartbeat value
    heartbeatElement.textContent = generateRandomHeartbeat();
}

// Update heartbeat every 3 seconds (3000 milliseconds)
setInterval(updateHeartbeat, 3000);
      // Function to update the step count
function updateStepCount() {
  const stepCountElement = document.getElementById('step-count');
  let currentStepCount = parseInt(stepCountElement.innerText); // Get the current step count
  currentStepCount += 10; // Increment the step count by 10 (adjust as needed)
  stepCountElement.innerText = currentStepCount; // Update the step count in the HTML
}

// Update the step count every second (1000 milliseconds)
setInterval(updateStepCount, 5000);

// Function to handle SOS button click event
function sendSOS() {
  // Replace this with your SOS functionality, like sending an alert or making a call for help
  alert("SOS message sent!");
}

// Function to generate a random temperature within the normal human range
function generateRandomTemperature() {
    // Generate a random number between 36.1 and 37.2
    return (Math.random() * (37.2 - 36.1) + 36.1).toFixed(1); // Fixed to 1 decimal place
}

// Function to update the temperature value periodically
function updateTemperature() {
    // Get the temperature element
    const temperatureElement = document.getElementById('temperature');
    // Update the text content with the new random temperature value
    temperatureElement.textContent = generateRandomTemperature() + "Â°C";
}

// Update temperature every 5 seconds (5000 milliseconds)
setInterval(updateTemperature, 5000);

// Call updateTemperature initially to set the initial value
updateTemperature();

        </script>

  </body>
</html>